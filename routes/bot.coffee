express = require('express')
router = express.Router()
algoliasearch = require('algoliasearch');
_send = require('../logics/_send')
_a3rt = require('../logics/_a3rt')
_send_hmac = require('../logics/_send_hmac')
_search = require('../logics/_search')

# webhook
router.post '/echo', (req, res, next) ->

  {KARTE_BOT_APPLICATION_KEY} = require('../config')

  {data, user, event_type} = req.body
  {user_id, assignee} = user

  if event_type == 'message'

    {app_name, message_id, thread_id, content} = data

    # Ëá™ÂàÜ„Åå„Ç¢„Çµ„Ç§„É≥„Åï„Çå„Å¶„ÅÑ„Åü„Çâ„ÄÅ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ„Çã
    if assignee == 'bot-' + KARTE_BOT_APPLICATION_KEY
      _send 'message', {
        app_name
        user_id
        content:
          text: 'ÂÉï„ÅØ„Ç®„Ç≥„Éº„Çµ„Éº„Éê„Éº„Åß„Åô: ' + content.text
      }, (err) ->
        
        if err
          console.log err
    else
    # Ëá™ÂàÜ„Åå„Ç¢„Çµ„Ç§„É≥„Åï„Çå„Å¶„ÅÑ„Å™„Åë„Çå„Å∞„ÄÅÊúâÁÑ°„ÇíË®Ä„Çè„Åï„Åö„Ç¢„Çµ„Ç§„É≥„Åô„Çã
      _send 'assign', {
        user_id
        assignee: 'bot-' + KARTE_BOT_APPLICATION_KEY
      }, (err) ->
        
        if err
          console.log err

  else if event_type == 'assign'

    if assignee == 'bot-' + KARTE_BOT_APPLICATION_KEY
      _send 'message', {
        app_name: 'webchat'
        user_id
        content:
          text: '„Åì„Çì„Å´„Å°„Çè„ÄÇ„Çè„Åü„ÅóKARTE Bot„ÅåÊãÖÂΩì„Åó„Åæ„Åô„ÄÇ ' 
      }

  return res.json {
    status: 'OK'
  }

# webhook
router.post '/a3rt', (req, res, next) ->

  {KARTE_BOT_APPLICATION_KEY} = require('../config')

  {data, user, event_type} = req.body
  {user_id, assignee} = user

  if event_type == 'message'

    {app_name, message_id, thread_id, content} = data

    if assignee == 'bot-' + KARTE_BOT_APPLICATION_KEY
      _a3rt content.text, (err, text) ->

        if err
          console.log err
          return

        _send 'message', {
          app_name
          user_id
          content:
            text: text
        }, (err) ->
          
          if err
            console.log err
          
  return res.json {
    status: 'OK'
  }

# webhook
router.post '/operator', (req, res, next) ->
  {KARTE_BOT_APPLICATION_KEY} = require('../config')
  {data, user, event_type} = req.body
  {user_id, assignee} = user
  {app_name, message_id, thread_id, content} = data
  if event_type == 'assign'
    if assignee is 'bot-' + KARTE_BOT_APPLICATION_KEY
      _send_delayed_msgs user_id, [
        '„Åì„Çì„Å´„Å°„ÅØ„ÄÇÁßÅ„Åü„Å°„ÅÆ„ÉÅ„Éº„É†„ÅØ„ÄÅÊù•ÈÄ±„ÅÆÊúàÊõúÊó•„Å´Êàª„Å£„Å¶„Åç„Åæ„Åô„ÄÇ'
        'ÁßÅ„Å´Êâã‰ºù„Åà„Çã„Åì„Å®„Åå„ÅÇ„Çå„Å∞„ÄÅÊïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
        '`{"type":"buttons","buttons":[{"title":"„É°„Éº„É´„ÅßÈÄöÁü•„ÇíÂèó„ÅëÂèñ„Çã"},{"title":"„Çè„Åã„Çâ„Å™„ÅÑÁî®Ë™û„ÇíË≥™Âïè„Åô„Çã"}]}`'
      ]

  else if event_type == 'message'
    if assignee is 'bot-' + KARTE_BOT_APPLICATION_KEY
      if content?.text == "[#„É°„Éº„É´„ÅßÈÄöÁü•„ÇíÂèó„ÅëÂèñ„Çã]"
        _send_delayed_msgs user_id, [
          'ÈÄöÁü•„ÇíÂèó„ÅëÂèñ„Çã„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
          '`{"type": "input", "input": {"title":"ÈÄöÁü•„ÇíÂèó„ÅëÂèñ„Çã","placeholder":"example.com","button":"Á¢∫ÂÆö","name":"email","event_name":"identify"}}`'
        ]
      else if (/^\[#(.*)Ë≥™Âïè„Åô„Çã\]$/).test(content?.text)
        _send_delayed_msgs user_id, [
          '„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ'
          'Áü•„Çä„Åü„ÅÑÁî®Ë™û„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
        ]
      else if (/^\[#email/).test(content?.text)
        _send_delayed_msgs user_id, [
          'ÂÖ•Âäõ„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åó„Åü„ÄÇ'
          '„ÉÅ„Éº„É†„É°„É≥„Éê„Éº„ÅåÊàª„ÇäÊ¨°Á¨¨„ÄÅ„ÅîÈÄ£Áµ°Â∑Æ„Åó‰∏ä„Åí„Åæ„Åô„ÄÇ'
          'üëã'
        ]
        _unassign user_id
      else if (/^\[#Ë≥™Âïè„ÇíÁµÇ„Åà„Çã\]$/).test(content?.text)
        _send_delayed_msgs user_id, [
          '„ÅîË≥™Âïè„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åó„Åü„ÄÇ'
          'üëã'
        ]
        _unassign user_id
      else
        _search {
          text: content.text
          count: 5
        }, (err, result) ->
          console.log err if err
          if result.count == 0 or err
            texts = [
              'Áî≥„ÅóË®≥„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÅË®ò‰∫ã„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ'
              '`{"type":"buttons","buttons":[{"title":"Ë≥™Âïè„ÇíÁµÇ„Åà„Çã"},{"title":"„Åæ„Å†Ë≥™Âïè„Åô„Çã"}]}`'
            ]
            _send_delayed_msgs user_id, texts
          else
            texts = [
              '„ÅîË≥™Âïè„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ'
              '„ÇÇ„Åó„Åã„Åó„Åü„Çâ„ÄÅ„Åì„Çå„Çâ„ÅÆË®ò‰∫ã„ÅåÂΩπ„Å´Á´ã„Å§„Åã„ÇÇ„Åó„Çå„Åæ„Åõ„Çì„ÄÇ'
              _makeLinkMessageStr(result.hits)
              '`{"type":"buttons","buttons":[{"title":"Ë≥™Âïè„ÇíÁµÇ„Åà„Çã"},{"title":"„Åæ„Å†Ë≥™Âïè„Åô„Çã"}]}`'
            ]
            _send_delayed_msgs user_id, texts
  return res.json {
    status: 'OK'
  }

_unassign = (user_id) ->
  # „Ç¢„Çµ„Ç§„É≥„ÇíÂ§ñ„Åô
  _send 'assign', {
    user_id
    assignee: null
    options: {
      # ÂêåÊôÇ„Å´„ÄåÂØæÂøúÊ∏à„Åø„Äç„Å´„Åô„Çã
      finish_responding: true
    }
  }, (err) ->
    if err
      console.log err

_send_delayed_msgs = (user_id, texts) ->
  return if not texts
  promises = texts.map (txt, i) ->
    return new Promise (resolve, reject) ->
      setTimeout () ->
        _send 'message', {
          app_name: 'webchat'
          user_id
          content:
            text: txt
        }, resolve
      , i * 1000
  Promise.all(promises)

_makeLinkMessageStr = (links) ->
  # link UI example:
  # '`{"type":"links","links":[{"title":"PLAIDÂÖ¨Âºè„Çµ„Ç§„Éà","url":"https://plaid.co.jp/"},{"title":"KARTEÂÖ¨Âºè„Çµ„Ç§„Éà","url":"https://karte.io/"}]}`'
  str = '`{"type":"links","links":['
  for link in links
    str += JSON.stringify(link)+','
  str = str.slice(0, -1)
  str += ']}`'
  return str

module.exports = router
